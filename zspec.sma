/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <fakemeta>
#include <basebuilder>
#include <fun>
#include <hamsandwich>

#define PLUGIN "ZSpec"
#define VERSION "1.0"
#define AUTHOR "Nova"

new bool:Blocked[33]
new bool:ZSpectator[33]
new MaxPlayers, MsgSayText

public plugin_init() 
{
	register_plugin( PLUGIN, VERSION, AUTHOR)
	
	register_clcmd( "say /zspec", "ZSpec")
	register_forward( FM_PlayerPreThink, "PlayerPreThink")
	register_logevent( "RoundStart", 2, "1=Round_Start")
	
	MsgSayText = get_user_msgid("SayText")
	MaxPlayers = get_maxplayers()
}

public RoundStart() 
{
	static Players[32], Num, Player, i;
	get_players( Players, Num ); 
	for( i = 0; i < Num; i++ )
	{
		Player = Players[i];
		remove_zspec(Player)
	}
}

public bb_prepphase_started()
{
	static Players[32], Num, Player, i;
	get_players( Players, Num ); 
	for( i = 0; i < Num; i++ )
	{
		Player = Players[i];
		remove_zspec(Player)
	}
}

public bb_round_started()
{
	static Players[32], Num, Player, i;
	get_players( Players, Num ); 
	for( i = 0; i < Num; i++ )
	{
		Player = Players[i];
		remove_zspec(Player)
	}
}

public bb_zombie_class_picked(id, class)
{
	new szName[33]
	get_user_name(id, szName, charsmax(szName))
	
	if(ZSpectator[id])
	{
		remove_zspec(id)
		
		client_print_color(0, "^3%s ^1is no longer ZSpectating.", szName)
	}
}

public PlayerPreThink(id)
{
	new Button = pev(id,pev_button)
    
	if(Blocked[id] && (Button & IN_ATTACK || Button & IN_ATTACK2))
		set_pev( id, pev_button, (Button & ~(IN_ATTACK | IN_ATTACK2)))
}

public ZSpec(id)
{	
	if(!bb_is_build_phase())
	{
		client_print_color( id, "You can only use this command in ^3Build Phase^1.")
		
		return PLUGIN_HANDLED
	}
	
	if(!is_user_alive(id))
	{
		client_print_color( id, "You have to be ^3Alive ^1in order to use this command.")
		
		return PLUGIN_HANDLED
	}
	
	if(!bb_is_user_zombie(id))
	{
		client_print_color( id, "You have to be a ^3Zombie ^1in order to use this command.")

		return PLUGIN_HANDLED
	}
	
	new szName[33]
	get_user_name(id, szName, charsmax(szName))
	
	if(ZSpectator[id])
	{
		set_task(0.5,"remove_zspec", id)
		
		client_print_color(0, "^3%s ^1is no longer ZSpectating.", szName)
	}
	
	else
	{
		ZSpectator[id] = true
		Blocked[id] = true
			
		set_user_rendering( id, kRenderFxNone, 0, 0, 0, kRenderTransAlpha, 0) 
		set_user_noclip( id, 1)
		
		client_print_color( id, "^3%s ^1is now ZSpectating.", szName)
		client_print_color( id, "If you want to stop ZSpectating type ^3/zspec ^1again.")
	}

	return PLUGIN_HANDLED
}

public remove_zspec(id)
{
	ZSpectator[id] = false
	Blocked[id] = false
		
	set_user_rendering(id)
	ExecuteHamB( Ham_CS_RoundRespawn, id)
	set_user_noclip( id, 0)
}

public client_disconnect(id)
{
	ZSpectator[id] = false
	Blocked[id] = false
}

client_print_color( index, const Msg[], any:...) 
{
	new Buffer[190], Buffer2[192]
	formatex( Buffer2, charsmax(Buffer2), "^x03[ZSpec] ^x01%s", Msg)
	vformat( Buffer, charsmax(Buffer), Buffer2, 3)
	
	if(!index) 
	{
		for (new i = 1; i <= MaxPlayers; i++) 
		{
			if (!is_user_connected(i))
				continue
			
			message_begin( MSG_ONE_UNRELIABLE, MsgSayText, _, i)
			write_byte(i)
			write_string(Buffer)
			message_end()
		}
	}
	
	else 
	{
		if (!is_user_connected(index))
			return
		
		message_begin( MSG_ONE, MsgSayText, _, index)
		write_byte(index)
		write_string(Buffer)
		message_end()
	}
}
